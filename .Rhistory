setwd("/Users/Krti/Desktop/ifanadiana-malaria/")
library('lme4')
library('plotly')
library('QuantPsyc')
library('sem')
library(MASS)
library(pscl)
library('gganimate')
library('ggplot2')
library('sf')
library('tmap')
library('tmaptools')
library('leaflet')
library('dplyr')
library('transformr')
library('png')
library('gifski')
library('ggsn')
library('ggpubr')
predictors <- read.csv('malaria_predictors_all.csv')
View(predictors)
predictors <- read.csv('malaria_updated_dec15.csv')
View(predictors)
par(mfrow=c(2,4))
p1 <- plot(predictors$palu.pc.2nn_0.08 ~ predictors$malaria.all.lag, predictors)
abline(lm(predictors$palu.pc.2nn_0.08 ~ predictors$malaria.all.lag), col = "red")
plot.new
par(mfrow=c(2,4))
p1 <- plot(predictors$palu.pc.2nn_0.08 ~ predictors$malaria.all.lag, predictors)
abline(lm(predictors$palu.pc.2nn_0.08 ~ predictors$malaria.all.lag), col = "red")
p2 <- plot(predictors$palu.pc.2nn_0.08 ~ predictors$forest.cover, predictors)
abline(lm(predictors$palu.pc.2nn_0.08 ~ predictors$forest.cover), col = "red")
setwd("/Users/Krti/Desktop/ifanadiana-malaria/spatial_datasets/Limite FKT")
fkt.bound <- st_read('Limite_FKT_Distr_Ifanadiana.shp')
joined <- inner_join(predictors, fkt.bound, by = "ID")
str(joined)
joined <- inner_join(predictors, fkt.bound, by = "ID")
View(Limite_FKT_Distr_Ifanadiana.shp)
library(ape)
joined <- inner_join(predictors, fkt.bound, by = "ID")
str(joined)
months <- c("January","February","March","April","May","June","July","August","September","October","November","December")
for (i in 1:length(joined$ID)) {
m <- months[joined$month[i]]
#print(m)
year <- toString(joined$year[i])
#print(year)
joined$date[i] <- paste(m,year)
}
joined$date <- factor(joined$date, levels = unique(joined$date))
predictors <- joined
# Join based on ID.
joined <- inner_join(predictors, fkt.bound, by = "ID")
str(joined)
# Set month as a factor
predictors$month <- as.factor(predictors$month)
# Round to 3rd decimal place
predictors$palu.pc.2nn_0.08 <- round(predictors$palu.pc.2nn_0.08, 3)
# Multiply by 1000
predictors$palu.pc.2nn_0.08 <- predictors$palu.pc.2nn_0.08*1000
# Remove NA rows
#predictors <- predictors[!is.na(predictors$palu.pc.2nn_0.08),]
# Create training and test data (2017)
training_data = predictors[(predictors$year == 2014) | (predictors$year == 2015) | (predictors$year == 2016),]
test_data = predictors[predictors$year == 2017,]
par(mfrow=c(2,4))
p1 <- plot(predictors$palu.pc.2nn_0.08,predictors$malaria.all.lag)
p2 <- plot(palu.pc.2nn_0.08 ~ forest.cover, predictors)
p3 <- plot(palu.pc.2nn_0.08 ~ monthly.max.t.lag, predictors)
p4 <- plot(palu.pc.2nn_0.08 ~ monthly.min.t.lag, predictors)
p5 <- plot(palu.pc.2nn_0.08 ~ monthly.p.lag, predictors)
p6 <- plot(palu.pc.2nn_0.08 ~ altitude, predictors)
p7 <- plot(palu.pc.2nn_0.08 ~ loss.year.of, predictors)
p8 <- boxplot(predictors$palu.pc.2nn_0.08~predictors$med.veg)
par(mfrow=c(2,4))
p1 <- plot(predictors$palu.pc.2nn_0.08,predictors$malaria.all.lag)
p2 <- plot(palu.pc.2nn_0.08 ~ forest.cover, predictors)
p3 <- plot(palu.pc.2nn_0.08 ~ monthly.max.t.lag, predictors)
p4 <- plot(palu.pc.2nn_0.08 ~ monthly.min.t.lag, predictors)
p5 <- plot(palu.pc.2nn_0.08 ~ monthly.p.lag, predictors)
p6 <- plot(palu.pc.2nn_0.08 ~ altitude, predictors)
p7 <- plot(palu.pc.2nn_0.08 ~ loss.year.of, predictors)
p8 <- boxplot(predictors$palu.pc.2nn_0.08~predictors$med.veg)
par(mfrow=c(2,3))
plot(palu.pc.2nn_0.08 ~ log(lu_rice), predictors)
plot(palu.pc.2nn_0.08 ~ log(lu_forest), predictors)
plot(palu.pc.2nn_0.08 ~ log(lu_water), predictors)
plot(palu.pc.2nn_0.08 ~ log(lu_res), predictors)
plot(palu.pc.2nn_0.08 ~ lu_savannah, predictors)
plot(palu.pc.2nn_0.08 ~ nets.high, predictors)
par(mfrow=c(1,1))
p8 <- boxplot(predictors$palu.pc.2nn_0.08~predictors$med.veg)
zinb.corr <- zeroinfl(palu.pc.2nn_0.08 ~ month*malaria.all.lag + Population + month + nets.high + nets.low + forest.gain + monthly.p.lag + monthly.max.t.lag + monthly.min.t.lag + altitude + forest.cover + med.veg + I(log(lu_rice + 10^(-6)))+ I(log(lu_savannah + 10^(-6)))+ I(log(lu_res+ 10^(-6)))+ I(log(lu_water+ 10^(-6))) + loss.3.year.mean + loss.year.of + loss.tot.sum, data = predictors, dist = "negbin")
summary(zinb.corr)
zinb.predictions <- predict(zinb.corr, predictors, na.action =NULL)
zinb.predictions[zinb.predictions > 1000] <- 1000
plot(predictors.noNa$palu.pc.2nn_0.08, zinb.predictions)
rmse.zinb <- (sum((predictors$palu.pc.2nn_0.08 - zinb.predictions)^2, na.rm = TRUE)/length(linear.predictions[!is.na(linear.predictions)]))^(0.5)
plot(residuals(zinb.corr))
zinb.corr <- zeroinfl(palu.pc.2nn_0.08 ~ Population + month + nets.high + nets.low + forest.gain +
p.lag.2 + max.t.lag.2 + min.t.lag.2 + altitude +
forest.cover + med.veg + I(log(lu_rice + 10^(-6)))+
I(log(lu_savannah + 10^(-6)))+ I(log(lu_res+ 10^(-6)))+
I(log(lu_water+ 10^(-6))) + loss.3.year.mean + loss.year.of +
loss.tot.sum, data = predictors, dist = "negbin")
summary(zinb.corr)
zinb.predictions <- predict(zinb.corr, na.action =NULL)
plot(predictors$palu.pc.2nn_0.08, zinb.predictions)
linear.corr <- lm(palu.pc.2nn_0.08 ~ month*malaria.all.lag + malaria.all.lag + month + nets.high + nets.low + forest.gain+ monthly.p.lag + monthly.max.t.lag + monthly.min.t.lag + altitude +
forest.cover + med.veg + I(log(lu_rice + 10^(-6)))+
I(log(lu_savannah + 10^(-6)))+ I(log(lu_res+ 10^(-6)))+
I(log(lu_water+ 10^(-6))) + loss.3.year.mean + loss.year.of +
loss.tot.sum, predictors)
summary(linear.corr)
linear.predictions <- predict(linear.corr)
hist(linear.predictions)
plot(predictors$palu.pc.2nn_0.08, linear.predictions)
load <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("lavaan","semPlot","semTools","nonnest2","htmlTable")
load(packages)
log_loss <- read.csv('/enterPathHere/log-of-loss.csv')
loss.model <- '/enterPathHere/log-of-loss.csv'
fit <- cfa(loss.model, data = log_loss)
summary(fit, fit.measures = FALSE)
parameterEstimates(fit, ci = TRUE, level = 0.95)
fitMeasures(fit, c("chisq", "rmsea", "srmr", "gfi", "ecvi"))
reliability(fit)
fit <- cfa(loss.model, data = log_loss)
log_loss <- read.csv('log-of-loss.csv')
log_loss <- read.csv('avg-losses_2001-2019.csv')
setwd("/Users/Krti/Desktop/ifanadiana-malaria/")
log_loss <- read.csv('avg-losses_2001-2019.csv')
loss.model <- ('log-of-loss.csv')
'loss1 =~ log_loss$log_loss.01 + log_loss$log_loss.02 + log_loss$log_loss.03
loss2 =~ log_loss$log_loss.04 + log_loss$log_loss.05 + log_loss$log_loss.06
loss3 =~ log_loss$log_loss.07 + log_loss$log_loss.08 + log_loss$log_loss.09'
fit <- cfa(loss.model, data = log_loss)
summary(fit, fit.measures = FALSE)
parameterEstimates(fit, ci = TRUE, level = 0.95)
fitMeasures(fit, c("chisq", "rmsea", "srmr", "gfi", "ecvi"))
reliability(fit)
# Export lavaan to output tables (if we want)
htmlTable(txtRound(parameterEstimates(fit, ci = TRUE, level = 0.95), digits=3, excl.cols=1), align="l|r|r|r|r|r|r|r|r|r")
htmlTable(txtRound(reliability(fit),3), align="l|r|r|r|r")
# Creating an SEM diagram
# svg("sem_r/cfa_example_2.svg")
semPaths(fit, style="lisrel",
whatLabels = "std", edge.label.cex = .6, node.label.cex = .6,
label.prop=0.9, edge.label.color = "black", rotation = 4,
equalizeManifests = FALSE, optimizeLatRes = TRUE, node.width = 1.5,
edge.width = 0.5, shapeMan = "rectangle", shapeLat = "ellipse",
shapeInt = "triangle", sizeMan = 4, sizeInt = 2, sizeLat = 4,
curve=2, unCol = "#070b8c")
dev.off()
```
semPaths(fit, style="lisrel",
whatLabels = "std", edge.label.cex = .6, node.label.cex = .6,
label.prop=0.9, edge.label.color = "black", rotation = 4,
equalizeManifests = FALSE, optimizeLatRes = TRUE, node.width = 1.5,
edge.width = 0.5, shapeMan = "rectangle", shapeLat = "ellipse",
shapeInt = "triangle", sizeMan = 4, sizeInt = 2, sizeLat = 4,
curve=2, unCol = "#070b8c")
dev.off()
sem.fit.measurement <- sem(sem.model.measurement, data = loss.model)
summary(sem.fit.measurement, fit.measures = TRUE)
semPaths(sem.fit.measurement, "par", edge.label.cex = 1.2, fade = FALSE)
loss.model <- 'loss1 =~ log_loss$log_loss.01 + log_loss$log_loss.02 + log_loss$log_loss.03
loss2 =~ log_loss$log_loss.04 + log_loss$log_loss.05 + log_loss$log_loss.06
loss3 =~ log_loss$log_loss.07 + log_loss$log_loss.08 + log_loss$log_loss.09'
sem.fit.measurement <- sem(sem.model.measurement, data = loss.model)
sem.fit.measurement <- sem(loss.model, data = log_loss)
summary(sem.fit.measurement, fit.measures = TRUE)
sem.fit.measurement <- sem(loss.model, data = log_loss)
fit <- cfa(loss.model, data = log_loss)
par(mfrow=c(2,4))
p1 <- plot(predictors$palu.pc.2nn_0.08,predictors$malaria.all.lag)
p2 <- plot(palu.pc.2nn_0.08 ~ forest.cover, predictors)
p3 <- plot(palu.pc.2nn_0.08 ~ monthly.max.t.lag, predictors)
p4 <- plot(palu.pc.2nn_0.08 ~ monthly.min.t.lag, predictors)
p5 <- plot(palu.pc.2nn_0.08 ~ monthly.p.lag, predictors)
p6 <- plot(palu.pc.2nn_0.08 ~ altitude, predictors)
p7 <- plot(palu.pc.2nn_0.08 ~ loss.year.of, predictors)
p8 <- boxplot(predictors$palu.pc.2nn_0.08~predictors$med.veg)
cols_reg = c('Population','nets.high','nets.low','altitude',
'monthly.p', 'monthly.max.t', 'monthly.min.t',
'mean.ann.temp','min.ann.temp','max.ann.temp',
'mean.ann.p','wet.p','dry.p',
'monthly.p.lag', 'monthly.max.t.lag', 'monthly.min.t.lag',
'max.t.lag.2','min.t.lag.2', 'p.lag.2',
'max.t.lag.3','min.t.lag.3','p.lag.3',
'lu_savannah','lu_res','lu_water','lu_rice',
'cover.year.of','cover.year.previous','loss.year.previous',
'loss.prop.year.of','loss.prop.year.previous','forest.gain',
'real.dist.csb')
dummies <- dummyVars(unemploy ~ ., data = predictors[,cols_reg])
train_dummies = predict(dummies, newdata = train[,cols_reg])
test_dummies = predict(dummies, newdata = test[,cols_reg])
print(dim(train_dummies)); print(dim(test_dummies))
train_dummies = predict(dummies, newdata = train[,cols_reg])
dummies <- dummyVars(unemploy ~ ., data = predictors[,cols_reg])
install.packages('dummyVars')
library('caret')
cols_reg = c('Population','nets.high','nets.low','altitude',
'monthly.p', 'monthly.max.t', 'monthly.min.t',
'mean.ann.temp','min.ann.temp','max.ann.temp',
'mean.ann.p','wet.p','dry.p',
'monthly.p.lag', 'monthly.max.t.lag', 'monthly.min.t.lag',
'max.t.lag.2','min.t.lag.2', 'p.lag.2',
'max.t.lag.3','min.t.lag.3','p.lag.3',
'lu_savannah','lu_res','lu_water','lu_rice',
'cover.year.of','cover.year.previous','loss.year.previous',
'loss.prop.year.of','loss.prop.year.previous','forest.gain',
'real.dist.csb')
dummies <- dummyVars(unemploy ~ ., data = predictors[,cols_reg])
dummies <- dummyVars(palu.pc.2nn_0.08 ~ ., data = predictors[,cols_reg])
# Step 1 - create a function for calculating the evaluation metrics R-squared and RMSE.
eval_metrics = function(model, df, predictions, target){
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 2))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 2))
print(adj_r2) #Adjusted R-squared
print(as.character(round(sqrt(sum(resids2)/N), 2))) #RMSE
}
# Step 2 - predicting and evaluating the model on train data
predictions = predict(lr, newdata = train)
eval_metrics(lr, train, predictions, target = 'palu.pc.2nn_0.08')
# Step 3 - predicting and evaluating the model on test data
predictions = predict(lr, newdata = test)
eval_metrics(lr, test, predictions, target = 'palu.pc.2nn_0.08')
predictions = predict(lr, newdata = train)
set.seed(100)   # arbitrary seed value
# index for randomly sampling observations for data partitioning: 80 / 20 split
index = sample(1:nrow(predictors), 0.8*nrow(predictors))
train = predictors[index,] # Create the training data
test = predictors[-index,] # Create the test data
dim(train)
dim(test)
```
```{r}
# Scaling the Numeric Features
# independent numeric variables
cols = c('Population','nets.high','nets.low','altitude',
'monthly.p', 'monthly.max.t', 'monthly.min.t',
'mean.ann.temp','min.ann.temp','max.ann.temp',
'mean.ann.p','wet.p','dry.p',
'monthly.p.lag', 'monthly.max.t.lag', 'monthly.min.t.lag',
'max.t.lag.2','min.t.lag.2', 'p.lag.2',
'max.t.lag.3','min.t.lag.3','p.lag.3',
'lu_savannah','lu_res','lu_water','lu_rice',
'cover.year.of','cover.year.previous','loss.year.previous',
'loss.prop.year.of','loss.prop.year.previous','forest.gain',
'real.dist.csb')
# Note: pre-processing object is fit only to the training data, while the scaling is applied on both the train and test sets.
pre_proc_val <- preProcess(train[,cols], method = c("center", "scale"))
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
summary(train)
```
lr = lm(palu.pc.2nn_0.08 ~ Population + nets.high + nets.low + altitude + monthly.p + monthly.max.t + monthly.min.t + mean.ann.temp + min.ann.temp + max.ann.temp + mean.ann.p + wet.p + dry.p + monthly.p.lag + monthly.max.t.lag + monthly.min.t.lag + max.t.lag.2 + min.t.lag.2 + p.lag.2 + max.t.lag.3 + min.t.lag.3 + p.lag.3 + lu_savannah + lu_res + lu_water + lu_rice + cover.year.of + cover.year.previous + loss.year.previous + loss.prop.year.of + loss.prop.year.previous + forest.gain + real.dist.csb, data = predictors)
summary(lr)
eval_metrics = function(model, df, predictions, target){
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 2))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 2))
print(adj_r2) #Adjusted R-squared
print(as.character(round(sqrt(sum(resids2)/N), 2))) #RMSE
}
# Step 2 - predicting and evaluating the model on train data
predictions = predict(lr, newdata = train)
eval_metrics(lr, train, predictions, target = 'palu.pc.2nn_0.08')
# Step 3 - predicting and evaluating the model on test data
predictions = predict(lr, newdata = test)
eval_metrics(lr, test, predictions, target = 'palu.pc.2nn_0.08')
cols_reg = c('Population','nets.high','nets.low','altitude',
'monthly.p', 'monthly.max.t', 'monthly.min.t',
'mean.ann.temp','min.ann.temp','max.ann.temp',
'mean.ann.p','wet.p','dry.p',
'monthly.p.lag', 'monthly.max.t.lag', 'monthly.min.t.lag',
'max.t.lag.2','min.t.lag.2', 'p.lag.2',
'max.t.lag.3','min.t.lag.3','p.lag.3',
'lu_savannah','lu_res','lu_water','lu_rice',
'cover.year.of','cover.year.previous','loss.year.previous',
'loss.prop.year.of','loss.prop.year.previous','forest.gain',
'real.dist.csb')
dummies <- dummyVars(palu.pc.2nn_0.08 ~ ., data=predictors[,cols_reg])
dummies <- dummyVars(predictors$palu.pc.2nn_0.08 ~ ., data=predictors[,cols_reg])
dummies <- dummyVars('palu.pc.2nn_0.08' ~ ., data=predictors[,cols_reg])
dummies <- dummyVars(palu.pc.2nn_0.08 ~ ., data=predictors[,cols_reg])
train_dummies = predict(dummies, newdata=train[,cols_reg])
test_dummies = predict(dummies, newdata=test[,cols_reg])
print(dim(train_dummies)); print(dim(test_dummies))
cols_reg = c('Population','nets.high','nets.low','altitude',
'monthly.p', 'monthly.max.t', 'monthly.min.t',
'mean.ann.temp','min.ann.temp','max.ann.temp',
'mean.ann.p','wet.p','dry.p',
'monthly.p.lag', 'monthly.max.t.lag', 'monthly.min.t.lag',
'max.t.lag.2','min.t.lag.2', 'p.lag.2',
'max.t.lag.3','min.t.lag.3','p.lag.3',
'lu_savannah','lu_res','lu_water','lu_rice',
'cover.year.of','cover.year.previous','loss.year.previous',
'loss.prop.year.of','loss.prop.year.previous','forest.gain',
'real.dist.csb')
dummies <- dummyVars(palu.pc.2nn_0.08 ~ ., data=predictors[,cols_reg])
train_dummies = predict(dummies, newdata=train[,cols_reg])
test_dummies = predict(dummies, newdata=test[,cols_reg])
print(dim(train_dummies)); print(dim(test_dummies))
library(glmnet)
x = as.matrix(train_dummies)
x = as.matrix(train_dummies)
y_train = train$palu.pc.2nn_0.08
x_test = as.matrix(test_dummies)
y_test = test$palu.pc.2nn_0.08
lambdas <- 10^seq(2, -3, by = -.1)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
summary(ridge_reg)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
train_cont <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
search = "random",
verboseIter = TRUE)
# Train the model
elastic_reg <- train(palu.pc.2nn_0.08 ~ .,
data = predictors,
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = train_cont)
# Best tuning parameter
elastic_reg$bestTune
